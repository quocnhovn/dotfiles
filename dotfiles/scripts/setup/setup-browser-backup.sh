#!/bin/bash

# Deepin Browser Backup and Restore Script
# Sao l∆∞u v√† kh√¥i ph·ª•c c·∫•u h√¨nh, bookmark, extension c·ªßa Deepin Browser

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
BROWSER_CONFIG_DIR="$HOME/.config/browser"
BACKUP_DIR="$DOTFILES_DIR/config/browser"

print_header() {
    echo -e "${BLUE}"
    echo "=============================================="
    echo "           DEEPIN BROWSER BACKUP"
    echo "=============================================="
    echo -e "${NC}"
}

print_step() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_browser_exists() {
    if [ ! -d "$BROWSER_CONFIG_DIR" ]; then
        print_error "Deepin Browser ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c ch∆∞a ch·∫°y l·∫ßn ƒë·∫ßu!"
        print_error "Vui l√≤ng m·ªü Deepin Browser v√† thi·∫øt l·∫≠p c·∫•u h√¨nh tr∆∞·ªõc."
        return 1
    fi
}

backup_browser_data() {
    print_step "ƒêang sao l∆∞u d·ªØ li·ªáu Deepin Browser..."

    # Create backup directory structure
    mkdir -p "$BACKUP_DIR/Default/virtual"
    mkdir -p "$BACKUP_DIR/Extensions"

    # Backup bookmarks
    if [ -f "$BROWSER_CONFIG_DIR/Default/virtual/Bookmarks" ]; then
        cp "$BROWSER_CONFIG_DIR/Default/virtual/Bookmarks" "$BACKUP_DIR/Default/virtual/"
        print_step "‚úì ƒê√£ sao l∆∞u Bookmarks"
    else
        print_warning "Kh√¥ng t√¨m th·∫•y file Bookmarks"
    fi

    # Backup bookmarks backup file
    if [ -f "$BROWSER_CONFIG_DIR/Default/virtual/Bookmarks.bak" ]; then
        cp "$BROWSER_CONFIG_DIR/Default/virtual/Bookmarks.bak" "$BACKUP_DIR/Default/virtual/"
        print_step "‚úì ƒê√£ sao l∆∞u Bookmarks.bak"
    fi

    # Backup preferences
    if [ -f "$BROWSER_CONFIG_DIR/Default/virtual/Preferences" ]; then
        cp "$BROWSER_CONFIG_DIR/Default/virtual/Preferences" "$BACKUP_DIR/Default/virtual/"
        print_step "‚úì ƒê√£ sao l∆∞u Preferences"
    else
        print_warning "Kh√¥ng t√¨m th·∫•y file Preferences"
    fi

    # Backup secure preferences
    if [ -f "$BROWSER_CONFIG_DIR/Default/Secure Preferences" ]; then
        cp "$BROWSER_CONFIG_DIR/Default/Secure Preferences" "$BACKUP_DIR/Default/"
        print_step "‚úì ƒê√£ sao l∆∞u Secure Preferences"
    fi

    # Backup extensions
    if [ -d "$BROWSER_CONFIG_DIR/Default/Extensions" ]; then
        # Create extensions list
        echo "# Danh s√°ch Extensions ƒë√£ c√†i ƒë·∫∑t" > "$BACKUP_DIR/extensions_list.txt"
        echo "# Generated on $(date)" >> "$BACKUP_DIR/extensions_list.txt"
        echo "" >> "$BACKUP_DIR/extensions_list.txt"

        for ext_dir in "$BROWSER_CONFIG_DIR/Default/Extensions"/*; do
            if [ -d "$ext_dir" ]; then
                ext_id=$(basename "$ext_dir")
                # Find manifest file to get extension name
                manifest_file=""
                for version_dir in "$ext_dir"/*; do
                    if [ -d "$version_dir" ] && [ -f "$version_dir/manifest.json" ]; then
                        manifest_file="$version_dir/manifest.json"
                        break
                    fi
                done

                if [ -n "$manifest_file" ]; then
                    ext_name=$(grep -o '"name"[[:space:]]*:[[:space:]]*"[^"]*"' "$manifest_file" | sed 's/"name"[[:space:]]*:[[:space:]]*"\([^"]*\)"/\1/')
                    version=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "$manifest_file" | sed 's/"version"[[:space:]]*:[[:space:]]*"\([^"]*\)"/\1/')
                    echo "Extension ID: $ext_id" >> "$BACKUP_DIR/extensions_list.txt"
                    echo "Name: $ext_name" >> "$BACKUP_DIR/extensions_list.txt"
                    echo "Version: $version" >> "$BACKUP_DIR/extensions_list.txt"
                    echo "---" >> "$BACKUP_DIR/extensions_list.txt"
                else
                    echo "Extension ID: $ext_id (No manifest found)" >> "$BACKUP_DIR/extensions_list.txt"
                    echo "---" >> "$BACKUP_DIR/extensions_list.txt"
                fi
            fi
        done

        # Copy entire Extensions directory
        cp -r "$BROWSER_CONFIG_DIR/Default/Extensions"/* "$BACKUP_DIR/Extensions/" 2>/dev/null || true
        print_step "‚úì ƒê√£ sao l∆∞u Extensions v√† t·∫°o danh s√°ch"
    else
        print_warning "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Extensions"
    fi

    # Backup Local State (contains important browser settings)
    if [ -f "$BROWSER_CONFIG_DIR/Local State" ]; then
        cp "$BROWSER_CONFIG_DIR/Local State" "$BACKUP_DIR/"
        print_step "‚úì ƒê√£ sao l∆∞u Local State"
    fi

    # Create restore instructions
    create_restore_instructions

    print_step "‚úÖ Ho√†n th√†nh sao l∆∞u d·ªØ li·ªáu Deepin Browser!"
    echo -e "${GREEN}V·ªã tr√≠ sao l∆∞u: $BACKUP_DIR${NC}"
}

create_restore_instructions() {
    cat > "$BACKUP_DIR/RESTORE_INSTRUCTIONS.md" << 'EOF'
# H∆∞·ªõng d·∫´n kh√¥i ph·ª•c Deepin Browser

## C√°ch kh√¥i ph·ª•c t·ª± ƒë·ªông
```bash
# Ch·∫°y script kh√¥i ph·ª•c
./scripts/setup/setup-browser-restore.sh
```

## C√°ch kh√¥i ph·ª•c th·ªß c√¥ng

### 1. ƒê√≥ng Deepin Browser
ƒê·∫£m b·∫£o browser ƒë√£ ƒë∆∞·ª£c ƒë√≥ng ho√†n to√†n tr∆∞·ªõc khi kh√¥i ph·ª•c.

### 2. Kh√¥i ph·ª•c Bookmarks
```bash
cp config/browser/Default/virtual/Bookmarks ~/.config/browser/Default/virtual/
cp config/browser/Default/virtual/Bookmarks.bak ~/.config/browser/Default/virtual/
```

### 3. Kh√¥i ph·ª•c Preferences
```bash
cp config/browser/Default/virtual/Preferences ~/.config/browser/Default/virtual/
cp "config/browser/Default/Secure Preferences" ~/.config/browser/Default/
```

### 4. Kh√¥i ph·ª•c Extensions
```bash
# T·∫°o th∆∞ m·ª•c Extensions n·∫øu ch∆∞a c√≥
mkdir -p ~/.config/browser/Default/Extensions

# Copy t·∫•t c·∫£ extensions
cp -r config/browser/Extensions/* ~/.config/browser/Default/Extensions/
```

### 5. Kh√¥i ph·ª•c Local State
```bash
cp config/browser/Local\ State ~/.config/browser/
```

### 6. Kh·ªüi ƒë·ªông l·∫°i browser
M·ªü Deepin Browser ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£.

## L∆∞u √Ω
- Extensions c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i trong settings
- M·ªôt s·ªë extension c√≥ th·ªÉ c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i
- Ki·ªÉm tra danh s√°ch extensions trong file `extensions_list.txt`
EOF
}

restore_browser_data() {
    print_step "ƒêang kh√¥i ph·ª•c d·ªØ li·ªáu Deepin Browser..."

    # Check if backup exists
    if [ ! -d "$BACKUP_DIR" ]; then
        print_error "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu sao l∆∞u!"
        print_error "Vui l√≤ng ch·∫°y backup tr∆∞·ªõc: ./scripts/setup/setup-browser-backup.sh backup"
        return 1
    fi

    # Check if browser is running
    if pgrep -f "browser" > /dev/null; then
        print_warning "Deepin Browser ƒëang ch·∫°y!"
        print_warning "Vui l√≤ng ƒë√≥ng browser tr∆∞·ªõc khi kh√¥i ph·ª•c."
        read -p "Nh·∫•n Enter sau khi ƒë√£ ƒë√≥ng browser..."
    fi

    # Create browser config directory if not exists
    mkdir -p "$BROWSER_CONFIG_DIR/Default/virtual"

    # Restore bookmarks
    if [ -f "$BACKUP_DIR/Default/virtual/Bookmarks" ]; then
        cp "$BACKUP_DIR/Default/virtual/Bookmarks" "$BROWSER_CONFIG_DIR/Default/virtual/"
        print_step "‚úì ƒê√£ kh√¥i ph·ª•c Bookmarks"
    fi

    if [ -f "$BACKUP_DIR/Default/virtual/Bookmarks.bak" ]; then
        cp "$BACKUP_DIR/Default/virtual/Bookmarks.bak" "$BROWSER_CONFIG_DIR/Default/virtual/"
        print_step "‚úì ƒê√£ kh√¥i ph·ª•c Bookmarks.bak"
    fi

    # Restore preferences
    if [ -f "$BACKUP_DIR/Default/virtual/Preferences" ]; then
        cp "$BACKUP_DIR/Default/virtual/Preferences" "$BROWSER_CONFIG_DIR/Default/virtual/"
        print_step "‚úì ƒê√£ kh√¥i ph·ª•c Preferences"
    fi

    if [ -f "$BACKUP_DIR/Default/Secure Preferences" ]; then
        cp "$BACKUP_DIR/Default/Secure Preferences" "$BROWSER_CONFIG_DIR/Default/"
        print_step "‚úì ƒê√£ kh√¥i ph·ª•c Secure Preferences"
    fi

    # Restore extensions
    if [ -d "$BACKUP_DIR/Extensions" ]; then
        mkdir -p "$BROWSER_CONFIG_DIR/Default/Extensions"
        cp -r "$BACKUP_DIR/Extensions"/* "$BROWSER_CONFIG_DIR/Default/Extensions/" 2>/dev/null || true
        print_step "‚úì ƒê√£ kh√¥i ph·ª•c Extensions"
    fi

    # Restore Local State
    if [ -f "$BACKUP_DIR/Local State" ]; then
        cp "$BACKUP_DIR/Local State" "$BROWSER_CONFIG_DIR/"
        print_step "‚úì ƒê√£ kh√¥i ph·ª•c Local State"
    fi

    print_step "‚úÖ Ho√†n th√†nh kh√¥i ph·ª•c d·ªØ li·ªáu Deepin Browser!"
    print_step "H√£y m·ªü Deepin Browser ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£."

    if [ -f "$BACKUP_DIR/extensions_list.txt" ]; then
        echo -e "${YELLOW}üìã Danh s√°ch extensions ƒë√£ sao l∆∞u:${NC}"
        cat "$BACKUP_DIR/extensions_list.txt" | grep -E "(Name:|Extension ID:)" | head -20
        echo ""
        echo -e "${YELLOW}üí° L∆∞u √Ω: M·ªôt s·ªë extension c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i trong browser settings.${NC}"
    fi
}

show_help() {
    echo "S·ª≠ d·ª•ng:"
    echo "  $0 backup    - Sao l∆∞u d·ªØ li·ªáu browser"
    echo "  $0 restore   - Kh√¥i ph·ª•c d·ªØ li·ªáu browser"
    echo "  $0 list      - Hi·ªÉn th·ªã danh s√°ch extensions ƒë√£ sao l∆∞u"
    echo "  $0 help      - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y"
}

list_extensions() {
    if [ -f "$BACKUP_DIR/extensions_list.txt" ]; then
        echo -e "${BLUE}üìã Danh s√°ch Extensions ƒë√£ sao l∆∞u:${NC}"
        echo ""
        cat "$BACKUP_DIR/extensions_list.txt"
    else
        print_error "Kh√¥ng t√¨m th·∫•y danh s√°ch extensions!"
        print_error "Vui l√≤ng ch·∫°y backup tr∆∞·ªõc: $0 backup"
    fi
}

main() {
    print_header

    case "${1:-}" in
        "backup")
            check_browser_exists && backup_browser_data
            ;;
        "restore")
            restore_browser_data
            ;;
        "list")
            list_extensions
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            show_help
            exit 1
            ;;
    esac
}

main "$@"
